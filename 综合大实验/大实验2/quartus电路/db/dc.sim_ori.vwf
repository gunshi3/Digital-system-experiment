/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1500000000.0;
	SIMULATION_TIME = 1000000000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 500.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("beg")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("beg[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "beg";
}

SIGNAL("beg[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "beg";
}

SIGNAL("beg[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "beg";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("clk2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clk3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("echo")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("qout")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("qout[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "qout";
}

SIGNAL("qout[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "qout";
}

SIGNAL("qout[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "qout";
}

SIGNAL("qout[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "qout";
}

SIGNAL("qout[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "qout";
}

SIGNAL("qout[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "qout";
}

SIGNAL("qout[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "qout";
}

SIGNAL("trig")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("beg[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3751509.162;
		NODE
		{
			REPEAT = 119;
			LEVEL 1 FOR 7503000.0;
			LEVEL 0 FOR 5002000.0;
		}
		LEVEL 1 FOR 7503000.0;
		LEVEL 0 FOR 650490.838;
	}
}

TRANSITION_LIST("beg[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 3751508.99;
		NODE
		{
			REPEAT = 119;
			LEVEL 0 FOR 2500999.853;
			LEVEL 1 FOR 5002000.0;
			LEVEL 0 FOR 0.147;
			LEVEL 1 FOR 5002000.0;
		}
		LEVEL 0 FOR 2500999.853;
		LEVEL 1 FOR 5002000.0;
		LEVEL 0 FOR 0.147;
		LEVEL 1 FOR 650491.01;
	}
}

TRANSITION_LIST("beg[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 6252508.948;
		NODE
		{
			REPEAT = 119;
			LEVEL 0 FOR 5002000.0;
			LEVEL 1 FOR 7503000.0;
		}
		LEVEL 0 FOR 5002000.0;
		LEVEL 1 FOR 650491.052;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3000000;
			LEVEL 0 FOR 250.0;
			LEVEL 1 FOR 250.0;
		}
	}
}

TRANSITION_LIST("clk2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1250506.287;
		NODE
		{
			REPEAT = 599;
			LEVEL 1 FOR 1250500.0;
			LEVEL 0 FOR 1250500.0;
		}
		LEVEL 1 FOR 650493.713;
	}
}

TRANSITION_LIST("clk3")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 51012.621;
		LEVEL 1 FOR 50999.915;
		NODE
		{
			REPEAT = 49;
			LEVEL 0 FOR 51000.0;
			LEVEL 1 FOR 51000.0;
		}
		NODE
		{
			REPEAT = 48;
			LEVEL 0 FOR 25602000.0;
			NODE
			{
				REPEAT = 49;
				LEVEL 1 FOR 51000.0;
				LEVEL 0 FOR 51000.0;
			}
			LEVEL 1 FOR 51000.0;
		}
		LEVEL 0 FOR 23651987.464;
	}
}

TRANSITION_LIST("echo")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2500.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 1499996500.0;
	}
}

TRANSITION_LIST("qout[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1500000000.0;
	}
}

TRANSITION_LIST("qout[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1500000000.0;
	}
}

TRANSITION_LIST("qout[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1500000000.0;
	}
}

TRANSITION_LIST("qout[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1500000000.0;
	}
}

TRANSITION_LIST("qout[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1500000000.0;
	}
}

TRANSITION_LIST("qout[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1500000000.0;
	}
}

TRANSITION_LIST("qout[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1500000000.0;
	}
}

TRANSITION_LIST("trig")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 15755.547;
		NODE
		{
			REPEAT = 48;
			LEVEL 0 FOR 30704002.952;
			LEVEL 1 FOR 15997.048;
		}
		LEVEL 0 FOR 25424244.453;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "trig";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "echo";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "beg";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
	CHILDREN = 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "beg[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "beg[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "beg[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "qout";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16;
}

DISPLAY_LINE
{
	CHANNEL = "qout[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "qout[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "qout[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "qout[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "qout[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "qout[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "qout[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

TIME_BAR
{
	TIME = 24850;
	MASTER = TRUE;
}
;
